#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace bydsa_atencion
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bydsa_atencion")]
	public partial class dataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategoria(Categoria instance);
    partial void UpdateCategoria(Categoria instance);
    partial void DeleteCategoria(Categoria instance);
    partial void InsertUsuarioSucursal(UsuarioSucursal instance);
    partial void UpdateUsuarioSucursal(UsuarioSucursal instance);
    partial void DeleteUsuarioSucursal(UsuarioSucursal instance);
    partial void InsertClasificacion(Clasificacion instance);
    partial void UpdateClasificacion(Clasificacion instance);
    partial void DeleteClasificacion(Clasificacion instance);
    partial void InsertColonia(Colonia instance);
    partial void UpdateColonia(Colonia instance);
    partial void DeleteColonia(Colonia instance);
    partial void InsertEstado(Estado instance);
    partial void UpdateEstado(Estado instance);
    partial void DeleteEstado(Estado instance);
    partial void InsertFalla(Falla instance);
    partial void UpdateFalla(Falla instance);
    partial void DeleteFalla(Falla instance);
    partial void InsertMarca(Marca instance);
    partial void UpdateMarca(Marca instance);
    partial void DeleteMarca(Marca instance);
    partial void InsertMunicipio(Municipio instance);
    partial void UpdateMunicipio(Municipio instance);
    partial void DeleteMunicipio(Municipio instance);
    partial void InsertOrigen(Origen instance);
    partial void UpdateOrigen(Origen instance);
    partial void DeleteOrigen(Origen instance);
    partial void InsertPais(Pais instance);
    partial void UpdatePais(Pais instance);
    partial void DeletePais(Pais instance);
    partial void InsertPresentacion(Presentacion instance);
    partial void UpdatePresentacion(Presentacion instance);
    partial void DeletePresentacion(Presentacion instance);
    partial void InsertProducto(Producto instance);
    partial void UpdateProducto(Producto instance);
    partial void DeleteProducto(Producto instance);
    partial void InsertRol(Rol instance);
    partial void UpdateRol(Rol instance);
    partial void DeleteRol(Rol instance);
    partial void InsertRuta(Ruta instance);
    partial void UpdateRuta(Ruta instance);
    partial void DeleteRuta(Ruta instance);
    partial void InsertSucursal(Sucursal instance);
    partial void UpdateSucursal(Sucursal instance);
    partial void DeleteSucursal(Sucursal instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    partial void InsertUsuarioRol(UsuarioRol instance);
    partial void UpdateUsuarioRol(UsuarioRol instance);
    partial void DeleteUsuarioRol(UsuarioRol instance);
    #endregion
		
		public dataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bydsa_atencionConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Categoria> Categoria
		{
			get
			{
				return this.GetTable<Categoria>();
			}
		}
		
		public System.Data.Linq.Table<UsuarioSucursal> UsuarioSucursal
		{
			get
			{
				return this.GetTable<UsuarioSucursal>();
			}
		}
		
		public System.Data.Linq.Table<Clasificacion> Clasificacion
		{
			get
			{
				return this.GetTable<Clasificacion>();
			}
		}
		
		public System.Data.Linq.Table<Colonia> Colonia
		{
			get
			{
				return this.GetTable<Colonia>();
			}
		}
		
		public System.Data.Linq.Table<Estado> Estado
		{
			get
			{
				return this.GetTable<Estado>();
			}
		}
		
		public System.Data.Linq.Table<Falla> Falla
		{
			get
			{
				return this.GetTable<Falla>();
			}
		}
		
		public System.Data.Linq.Table<Marca> Marca
		{
			get
			{
				return this.GetTable<Marca>();
			}
		}
		
		public System.Data.Linq.Table<Municipio> Municipio
		{
			get
			{
				return this.GetTable<Municipio>();
			}
		}
		
		public System.Data.Linq.Table<Origen> Origen
		{
			get
			{
				return this.GetTable<Origen>();
			}
		}
		
		public System.Data.Linq.Table<Pais> Pais
		{
			get
			{
				return this.GetTable<Pais>();
			}
		}
		
		public System.Data.Linq.Table<Presentacion> Presentacion
		{
			get
			{
				return this.GetTable<Presentacion>();
			}
		}
		
		public System.Data.Linq.Table<Producto> Producto
		{
			get
			{
				return this.GetTable<Producto>();
			}
		}
		
		public System.Data.Linq.Table<Rol> Rol
		{
			get
			{
				return this.GetTable<Rol>();
			}
		}
		
		public System.Data.Linq.Table<Ruta> Ruta
		{
			get
			{
				return this.GetTable<Ruta>();
			}
		}
		
		public System.Data.Linq.Table<Sucursal> Sucursal
		{
			get
			{
				return this.GetTable<Sucursal>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuario
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
		
		public System.Data.Linq.Table<UsuarioRol> UsuarioRol
		{
			get
			{
				return this.GetTable<UsuarioRol>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categoria")]
	public partial class Categoria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _categoriaId;
		
		private string _categoria_descripcion;
		
		private EntitySet<Clasificacion> _Clasificacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncategoriaIdChanging(int value);
    partial void OncategoriaIdChanged();
    partial void Oncategoria_descripcionChanging(string value);
    partial void Oncategoria_descripcionChanged();
    #endregion
		
		public Categoria()
		{
			this._Clasificacion = new EntitySet<Clasificacion>(new Action<Clasificacion>(this.attach_Clasificacion), new Action<Clasificacion>(this.detach_Clasificacion));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoriaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int categoriaId
		{
			get
			{
				return this._categoriaId;
			}
			set
			{
				if ((this._categoriaId != value))
				{
					this.OncategoriaIdChanging(value);
					this.SendPropertyChanging();
					this._categoriaId = value;
					this.SendPropertyChanged("categoriaId");
					this.OncategoriaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoria_descripcion", DbType="VarChar(500)")]
		public string categoria_descripcion
		{
			get
			{
				return this._categoria_descripcion;
			}
			set
			{
				if ((this._categoria_descripcion != value))
				{
					this.Oncategoria_descripcionChanging(value);
					this.SendPropertyChanging();
					this._categoria_descripcion = value;
					this.SendPropertyChanged("categoria_descripcion");
					this.Oncategoria_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categoria_Clasificacion", Storage="_Clasificacion", ThisKey="categoriaId", OtherKey="categoriaId")]
		public EntitySet<Clasificacion> Clasificacion
		{
			get
			{
				return this._Clasificacion;
			}
			set
			{
				this._Clasificacion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clasificacion(Clasificacion entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = this;
		}
		
		private void detach_Clasificacion(Clasificacion entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsuarioSucursal")]
	public partial class UsuarioSucursal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _usuariosucursalId;
		
		private int _usuarioId;
		
		private int _sucursalId;
		
		private EntityRef<Sucursal> _Sucursal;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusuariosucursalIdChanging(int value);
    partial void OnusuariosucursalIdChanged();
    partial void OnusuarioIdChanging(int value);
    partial void OnusuarioIdChanged();
    partial void OnsucursalIdChanging(int value);
    partial void OnsucursalIdChanged();
    #endregion
		
		public UsuarioSucursal()
		{
			this._Sucursal = default(EntityRef<Sucursal>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuariosucursalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int usuariosucursalId
		{
			get
			{
				return this._usuariosucursalId;
			}
			set
			{
				if ((this._usuariosucursalId != value))
				{
					this.OnusuariosucursalIdChanging(value);
					this.SendPropertyChanging();
					this._usuariosucursalId = value;
					this.SendPropertyChanged("usuariosucursalId");
					this.OnusuariosucursalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuarioId", DbType="Int NOT NULL")]
		public int usuarioId
		{
			get
			{
				return this._usuarioId;
			}
			set
			{
				if ((this._usuarioId != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusuarioIdChanging(value);
					this.SendPropertyChanging();
					this._usuarioId = value;
					this.SendPropertyChanged("usuarioId");
					this.OnusuarioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sucursalId", DbType="Int NOT NULL")]
		public int sucursalId
		{
			get
			{
				return this._sucursalId;
			}
			set
			{
				if ((this._sucursalId != value))
				{
					if (this._Sucursal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsucursalIdChanging(value);
					this.SendPropertyChanging();
					this._sucursalId = value;
					this.SendPropertyChanged("sucursalId");
					this.OnsucursalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_UsuarioSucursal", Storage="_Sucursal", ThisKey="sucursalId", OtherKey="sucursalId", IsForeignKey=true)]
		public Sucursal Sucursal
		{
			get
			{
				return this._Sucursal.Entity;
			}
			set
			{
				Sucursal previousValue = this._Sucursal.Entity;
				if (((previousValue != value) 
							|| (this._Sucursal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sucursal.Entity = null;
						previousValue.UsuarioSucursal.Remove(this);
					}
					this._Sucursal.Entity = value;
					if ((value != null))
					{
						value.UsuarioSucursal.Add(this);
						this._sucursalId = value.sucursalId;
					}
					else
					{
						this._sucursalId = default(int);
					}
					this.SendPropertyChanged("Sucursal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_UsuarioSucursal", Storage="_Usuario", ThisKey="usuarioId", OtherKey="usuarioId", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.UsuarioSucursal.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.UsuarioSucursal.Add(this);
						this._usuarioId = value.usuarioId;
					}
					else
					{
						this._usuarioId = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clasificacion")]
	public partial class Clasificacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _clasificacionId;
		
		private string _clasificacion_descripcion;
		
		private System.Nullable<int> _categoriaId;
		
		private EntityRef<Categoria> _Categoria;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnclasificacionIdChanging(int value);
    partial void OnclasificacionIdChanged();
    partial void Onclasificacion_descripcionChanging(string value);
    partial void Onclasificacion_descripcionChanged();
    partial void OncategoriaIdChanging(System.Nullable<int> value);
    partial void OncategoriaIdChanged();
    #endregion
		
		public Clasificacion()
		{
			this._Categoria = default(EntityRef<Categoria>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clasificacionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int clasificacionId
		{
			get
			{
				return this._clasificacionId;
			}
			set
			{
				if ((this._clasificacionId != value))
				{
					this.OnclasificacionIdChanging(value);
					this.SendPropertyChanging();
					this._clasificacionId = value;
					this.SendPropertyChanged("clasificacionId");
					this.OnclasificacionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clasificacion_descripcion", DbType="VarChar(500)")]
		public string clasificacion_descripcion
		{
			get
			{
				return this._clasificacion_descripcion;
			}
			set
			{
				if ((this._clasificacion_descripcion != value))
				{
					this.Onclasificacion_descripcionChanging(value);
					this.SendPropertyChanging();
					this._clasificacion_descripcion = value;
					this.SendPropertyChanged("clasificacion_descripcion");
					this.Onclasificacion_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoriaId", DbType="Int")]
		public System.Nullable<int> categoriaId
		{
			get
			{
				return this._categoriaId;
			}
			set
			{
				if ((this._categoriaId != value))
				{
					if (this._Categoria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoriaIdChanging(value);
					this.SendPropertyChanging();
					this._categoriaId = value;
					this.SendPropertyChanged("categoriaId");
					this.OncategoriaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categoria_Clasificacion", Storage="_Categoria", ThisKey="categoriaId", OtherKey="categoriaId", IsForeignKey=true)]
		public Categoria Categoria
		{
			get
			{
				return this._Categoria.Entity;
			}
			set
			{
				Categoria previousValue = this._Categoria.Entity;
				if (((previousValue != value) 
							|| (this._Categoria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categoria.Entity = null;
						previousValue.Clasificacion.Remove(this);
					}
					this._Categoria.Entity = value;
					if ((value != null))
					{
						value.Clasificacion.Add(this);
						this._categoriaId = value.categoriaId;
					}
					else
					{
						this._categoriaId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Categoria");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colonia")]
	public partial class Colonia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _coloniaId;
		
		private string _colonia_descripcion;
		
		private System.Nullable<int> _municipioId;
		
		private System.Nullable<int> _sucursalId;
		
		private EntityRef<Municipio> _Municipio;
		
		private EntityRef<Sucursal> _Sucursal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncoloniaIdChanging(int value);
    partial void OncoloniaIdChanged();
    partial void Oncolonia_descripcionChanging(string value);
    partial void Oncolonia_descripcionChanged();
    partial void OnmunicipioIdChanging(System.Nullable<int> value);
    partial void OnmunicipioIdChanged();
    partial void OnsucursalIdChanging(System.Nullable<int> value);
    partial void OnsucursalIdChanged();
    #endregion
		
		public Colonia()
		{
			this._Municipio = default(EntityRef<Municipio>);
			this._Sucursal = default(EntityRef<Sucursal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coloniaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int coloniaId
		{
			get
			{
				return this._coloniaId;
			}
			set
			{
				if ((this._coloniaId != value))
				{
					this.OncoloniaIdChanging(value);
					this.SendPropertyChanging();
					this._coloniaId = value;
					this.SendPropertyChanged("coloniaId");
					this.OncoloniaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_colonia_descripcion", DbType="VarChar(500)")]
		public string colonia_descripcion
		{
			get
			{
				return this._colonia_descripcion;
			}
			set
			{
				if ((this._colonia_descripcion != value))
				{
					this.Oncolonia_descripcionChanging(value);
					this.SendPropertyChanging();
					this._colonia_descripcion = value;
					this.SendPropertyChanged("colonia_descripcion");
					this.Oncolonia_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_municipioId", DbType="Int")]
		public System.Nullable<int> municipioId
		{
			get
			{
				return this._municipioId;
			}
			set
			{
				if ((this._municipioId != value))
				{
					if (this._Municipio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmunicipioIdChanging(value);
					this.SendPropertyChanging();
					this._municipioId = value;
					this.SendPropertyChanged("municipioId");
					this.OnmunicipioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sucursalId", DbType="Int")]
		public System.Nullable<int> sucursalId
		{
			get
			{
				return this._sucursalId;
			}
			set
			{
				if ((this._sucursalId != value))
				{
					if (this._Sucursal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsucursalIdChanging(value);
					this.SendPropertyChanging();
					this._sucursalId = value;
					this.SendPropertyChanged("sucursalId");
					this.OnsucursalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipio_Colonia", Storage="_Municipio", ThisKey="municipioId", OtherKey="municipioId", IsForeignKey=true)]
		public Municipio Municipio
		{
			get
			{
				return this._Municipio.Entity;
			}
			set
			{
				Municipio previousValue = this._Municipio.Entity;
				if (((previousValue != value) 
							|| (this._Municipio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Municipio.Entity = null;
						previousValue.Colonia.Remove(this);
					}
					this._Municipio.Entity = value;
					if ((value != null))
					{
						value.Colonia.Add(this);
						this._municipioId = value.municipioId;
					}
					else
					{
						this._municipioId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Municipio");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_Colonia", Storage="_Sucursal", ThisKey="sucursalId", OtherKey="sucursalId", IsForeignKey=true)]
		public Sucursal Sucursal
		{
			get
			{
				return this._Sucursal.Entity;
			}
			set
			{
				Sucursal previousValue = this._Sucursal.Entity;
				if (((previousValue != value) 
							|| (this._Sucursal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sucursal.Entity = null;
						previousValue.Colonia.Remove(this);
					}
					this._Sucursal.Entity = value;
					if ((value != null))
					{
						value.Colonia.Add(this);
						this._sucursalId = value.sucursalId;
					}
					else
					{
						this._sucursalId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sucursal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Estado")]
	public partial class Estado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _estadoId;
		
		private string _estado_descripcion;
		
		private System.Nullable<int> _paisId;
		
		private EntitySet<Municipio> _Municipio;
		
		private EntitySet<Sucursal> _Sucursal;
		
		private EntityRef<Pais> _Pais;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnestadoIdChanging(int value);
    partial void OnestadoIdChanged();
    partial void Onestado_descripcionChanging(string value);
    partial void Onestado_descripcionChanged();
    partial void OnpaisIdChanging(System.Nullable<int> value);
    partial void OnpaisIdChanged();
    #endregion
		
		public Estado()
		{
			this._Municipio = new EntitySet<Municipio>(new Action<Municipio>(this.attach_Municipio), new Action<Municipio>(this.detach_Municipio));
			this._Sucursal = new EntitySet<Sucursal>(new Action<Sucursal>(this.attach_Sucursal), new Action<Sucursal>(this.detach_Sucursal));
			this._Pais = default(EntityRef<Pais>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_estadoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int estadoId
		{
			get
			{
				return this._estadoId;
			}
			set
			{
				if ((this._estadoId != value))
				{
					this.OnestadoIdChanging(value);
					this.SendPropertyChanging();
					this._estadoId = value;
					this.SendPropertyChanged("estadoId");
					this.OnestadoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_estado_descripcion", DbType="VarChar(500)")]
		public string estado_descripcion
		{
			get
			{
				return this._estado_descripcion;
			}
			set
			{
				if ((this._estado_descripcion != value))
				{
					this.Onestado_descripcionChanging(value);
					this.SendPropertyChanging();
					this._estado_descripcion = value;
					this.SendPropertyChanged("estado_descripcion");
					this.Onestado_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paisId", DbType="Int")]
		public System.Nullable<int> paisId
		{
			get
			{
				return this._paisId;
			}
			set
			{
				if ((this._paisId != value))
				{
					if (this._Pais.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpaisIdChanging(value);
					this.SendPropertyChanging();
					this._paisId = value;
					this.SendPropertyChanged("paisId");
					this.OnpaisIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estado_Municipio", Storage="_Municipio", ThisKey="estadoId", OtherKey="estadoId")]
		public EntitySet<Municipio> Municipio
		{
			get
			{
				return this._Municipio;
			}
			set
			{
				this._Municipio.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estado_Sucursal", Storage="_Sucursal", ThisKey="estadoId", OtherKey="estadoId")]
		public EntitySet<Sucursal> Sucursal
		{
			get
			{
				return this._Sucursal;
			}
			set
			{
				this._Sucursal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pais_Estado", Storage="_Pais", ThisKey="paisId", OtherKey="paisId", IsForeignKey=true)]
		public Pais Pais
		{
			get
			{
				return this._Pais.Entity;
			}
			set
			{
				Pais previousValue = this._Pais.Entity;
				if (((previousValue != value) 
							|| (this._Pais.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pais.Entity = null;
						previousValue.Estado.Remove(this);
					}
					this._Pais.Entity = value;
					if ((value != null))
					{
						value.Estado.Add(this);
						this._paisId = value.paisId;
					}
					else
					{
						this._paisId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pais");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Municipio(Municipio entity)
		{
			this.SendPropertyChanging();
			entity.Estado = this;
		}
		
		private void detach_Municipio(Municipio entity)
		{
			this.SendPropertyChanging();
			entity.Estado = null;
		}
		
		private void attach_Sucursal(Sucursal entity)
		{
			this.SendPropertyChanging();
			entity.Estado = this;
		}
		
		private void detach_Sucursal(Sucursal entity)
		{
			this.SendPropertyChanging();
			entity.Estado = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Falla")]
	public partial class Falla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fallaId;
		
		private string _falla_descripcion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfallaIdChanging(int value);
    partial void OnfallaIdChanged();
    partial void Onfalla_descripcionChanging(string value);
    partial void Onfalla_descripcionChanged();
    #endregion
		
		public Falla()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fallaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fallaId
		{
			get
			{
				return this._fallaId;
			}
			set
			{
				if ((this._fallaId != value))
				{
					this.OnfallaIdChanging(value);
					this.SendPropertyChanging();
					this._fallaId = value;
					this.SendPropertyChanged("fallaId");
					this.OnfallaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_falla_descripcion", DbType="VarChar(500)")]
		public string falla_descripcion
		{
			get
			{
				return this._falla_descripcion;
			}
			set
			{
				if ((this._falla_descripcion != value))
				{
					this.Onfalla_descripcionChanging(value);
					this.SendPropertyChanging();
					this._falla_descripcion = value;
					this.SendPropertyChanged("falla_descripcion");
					this.Onfalla_descripcionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marca")]
	public partial class Marca : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _marcaId;
		
		private string _marca_descripcion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmarcaIdChanging(int value);
    partial void OnmarcaIdChanged();
    partial void Onmarca_descripcionChanging(string value);
    partial void Onmarca_descripcionChanged();
    #endregion
		
		public Marca()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marcaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int marcaId
		{
			get
			{
				return this._marcaId;
			}
			set
			{
				if ((this._marcaId != value))
				{
					this.OnmarcaIdChanging(value);
					this.SendPropertyChanging();
					this._marcaId = value;
					this.SendPropertyChanged("marcaId");
					this.OnmarcaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marca_descripcion", DbType="VarChar(500)")]
		public string marca_descripcion
		{
			get
			{
				return this._marca_descripcion;
			}
			set
			{
				if ((this._marca_descripcion != value))
				{
					this.Onmarca_descripcionChanging(value);
					this.SendPropertyChanging();
					this._marca_descripcion = value;
					this.SendPropertyChanged("marca_descripcion");
					this.Onmarca_descripcionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Municipio")]
	public partial class Municipio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _municipioId;
		
		private string _municipio_descripcion;
		
		private System.Nullable<int> _estadoId;
		
		private EntitySet<Colonia> _Colonia;
		
		private EntityRef<Estado> _Estado;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmunicipioIdChanging(int value);
    partial void OnmunicipioIdChanged();
    partial void Onmunicipio_descripcionChanging(string value);
    partial void Onmunicipio_descripcionChanged();
    partial void OnestadoIdChanging(System.Nullable<int> value);
    partial void OnestadoIdChanged();
    #endregion
		
		public Municipio()
		{
			this._Colonia = new EntitySet<Colonia>(new Action<Colonia>(this.attach_Colonia), new Action<Colonia>(this.detach_Colonia));
			this._Estado = default(EntityRef<Estado>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_municipioId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int municipioId
		{
			get
			{
				return this._municipioId;
			}
			set
			{
				if ((this._municipioId != value))
				{
					this.OnmunicipioIdChanging(value);
					this.SendPropertyChanging();
					this._municipioId = value;
					this.SendPropertyChanged("municipioId");
					this.OnmunicipioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_municipio_descripcion", DbType="VarChar(500)")]
		public string municipio_descripcion
		{
			get
			{
				return this._municipio_descripcion;
			}
			set
			{
				if ((this._municipio_descripcion != value))
				{
					this.Onmunicipio_descripcionChanging(value);
					this.SendPropertyChanging();
					this._municipio_descripcion = value;
					this.SendPropertyChanged("municipio_descripcion");
					this.Onmunicipio_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_estadoId", DbType="Int")]
		public System.Nullable<int> estadoId
		{
			get
			{
				return this._estadoId;
			}
			set
			{
				if ((this._estadoId != value))
				{
					if (this._Estado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnestadoIdChanging(value);
					this.SendPropertyChanging();
					this._estadoId = value;
					this.SendPropertyChanged("estadoId");
					this.OnestadoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipio_Colonia", Storage="_Colonia", ThisKey="municipioId", OtherKey="municipioId")]
		public EntitySet<Colonia> Colonia
		{
			get
			{
				return this._Colonia;
			}
			set
			{
				this._Colonia.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estado_Municipio", Storage="_Estado", ThisKey="estadoId", OtherKey="estadoId", IsForeignKey=true)]
		public Estado Estado
		{
			get
			{
				return this._Estado.Entity;
			}
			set
			{
				Estado previousValue = this._Estado.Entity;
				if (((previousValue != value) 
							|| (this._Estado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estado.Entity = null;
						previousValue.Municipio.Remove(this);
					}
					this._Estado.Entity = value;
					if ((value != null))
					{
						value.Municipio.Add(this);
						this._estadoId = value.estadoId;
					}
					else
					{
						this._estadoId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Estado");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Colonia(Colonia entity)
		{
			this.SendPropertyChanging();
			entity.Municipio = this;
		}
		
		private void detach_Colonia(Colonia entity)
		{
			this.SendPropertyChanging();
			entity.Municipio = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Origen")]
	public partial class Origen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _origenId;
		
		private string _origen_descripcion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorigenIdChanging(int value);
    partial void OnorigenIdChanged();
    partial void Onorigen_descripcionChanging(string value);
    partial void Onorigen_descripcionChanged();
    #endregion
		
		public Origen()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_origenId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int origenId
		{
			get
			{
				return this._origenId;
			}
			set
			{
				if ((this._origenId != value))
				{
					this.OnorigenIdChanging(value);
					this.SendPropertyChanging();
					this._origenId = value;
					this.SendPropertyChanged("origenId");
					this.OnorigenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_origen_descripcion", DbType="VarChar(500)")]
		public string origen_descripcion
		{
			get
			{
				return this._origen_descripcion;
			}
			set
			{
				if ((this._origen_descripcion != value))
				{
					this.Onorigen_descripcionChanging(value);
					this.SendPropertyChanging();
					this._origen_descripcion = value;
					this.SendPropertyChanged("origen_descripcion");
					this.Onorigen_descripcionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pais")]
	public partial class Pais : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _paisId;
		
		private string _pais_descripcion;
		
		private EntitySet<Estado> _Estado;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpaisIdChanging(int value);
    partial void OnpaisIdChanged();
    partial void Onpais_descripcionChanging(string value);
    partial void Onpais_descripcionChanged();
    #endregion
		
		public Pais()
		{
			this._Estado = new EntitySet<Estado>(new Action<Estado>(this.attach_Estado), new Action<Estado>(this.detach_Estado));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paisId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int paisId
		{
			get
			{
				return this._paisId;
			}
			set
			{
				if ((this._paisId != value))
				{
					this.OnpaisIdChanging(value);
					this.SendPropertyChanging();
					this._paisId = value;
					this.SendPropertyChanged("paisId");
					this.OnpaisIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pais_descripcion", DbType="VarChar(500)")]
		public string pais_descripcion
		{
			get
			{
				return this._pais_descripcion;
			}
			set
			{
				if ((this._pais_descripcion != value))
				{
					this.Onpais_descripcionChanging(value);
					this.SendPropertyChanging();
					this._pais_descripcion = value;
					this.SendPropertyChanged("pais_descripcion");
					this.Onpais_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pais_Estado", Storage="_Estado", ThisKey="paisId", OtherKey="paisId")]
		public EntitySet<Estado> Estado
		{
			get
			{
				return this._Estado;
			}
			set
			{
				this._Estado.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Estado(Estado entity)
		{
			this.SendPropertyChanging();
			entity.Pais = this;
		}
		
		private void detach_Estado(Estado entity)
		{
			this.SendPropertyChanging();
			entity.Pais = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Presentacion")]
	public partial class Presentacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _presentacionId;
		
		private string _presentacion_descripcion;
		
		private EntitySet<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpresentacionIdChanging(int value);
    partial void OnpresentacionIdChanged();
    partial void Onpresentacion_descripcionChanging(string value);
    partial void Onpresentacion_descripcionChanged();
    #endregion
		
		public Presentacion()
		{
			this._Producto = new EntitySet<Producto>(new Action<Producto>(this.attach_Producto), new Action<Producto>(this.detach_Producto));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentacionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int presentacionId
		{
			get
			{
				return this._presentacionId;
			}
			set
			{
				if ((this._presentacionId != value))
				{
					this.OnpresentacionIdChanging(value);
					this.SendPropertyChanging();
					this._presentacionId = value;
					this.SendPropertyChanged("presentacionId");
					this.OnpresentacionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentacion_descripcion", DbType="VarChar(500)")]
		public string presentacion_descripcion
		{
			get
			{
				return this._presentacion_descripcion;
			}
			set
			{
				if ((this._presentacion_descripcion != value))
				{
					this.Onpresentacion_descripcionChanging(value);
					this.SendPropertyChanging();
					this._presentacion_descripcion = value;
					this.SendPropertyChanged("presentacion_descripcion");
					this.Onpresentacion_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Presentacion_Producto", Storage="_Producto", ThisKey="presentacionId", OtherKey="presentacionId")]
		public EntitySet<Producto> Producto
		{
			get
			{
				return this._Producto;
			}
			set
			{
				this._Producto.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Producto(Producto entity)
		{
			this.SendPropertyChanging();
			entity.Presentacion = this;
		}
		
		private void detach_Producto(Producto entity)
		{
			this.SendPropertyChanging();
			entity.Presentacion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Producto")]
	public partial class Producto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _productoId;
		
		private string _producto_descripcion;
		
		private System.Nullable<int> _presentacionId;
		
		private EntityRef<Presentacion> _Presentacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnproductoIdChanging(int value);
    partial void OnproductoIdChanged();
    partial void Onproducto_descripcionChanging(string value);
    partial void Onproducto_descripcionChanged();
    partial void OnpresentacionIdChanging(System.Nullable<int> value);
    partial void OnpresentacionIdChanged();
    #endregion
		
		public Producto()
		{
			this._Presentacion = default(EntityRef<Presentacion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int productoId
		{
			get
			{
				return this._productoId;
			}
			set
			{
				if ((this._productoId != value))
				{
					this.OnproductoIdChanging(value);
					this.SendPropertyChanging();
					this._productoId = value;
					this.SendPropertyChanged("productoId");
					this.OnproductoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_producto_descripcion", DbType="VarChar(500)")]
		public string producto_descripcion
		{
			get
			{
				return this._producto_descripcion;
			}
			set
			{
				if ((this._producto_descripcion != value))
				{
					this.Onproducto_descripcionChanging(value);
					this.SendPropertyChanging();
					this._producto_descripcion = value;
					this.SendPropertyChanged("producto_descripcion");
					this.Onproducto_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentacionId", DbType="Int")]
		public System.Nullable<int> presentacionId
		{
			get
			{
				return this._presentacionId;
			}
			set
			{
				if ((this._presentacionId != value))
				{
					if (this._Presentacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpresentacionIdChanging(value);
					this.SendPropertyChanging();
					this._presentacionId = value;
					this.SendPropertyChanged("presentacionId");
					this.OnpresentacionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Presentacion_Producto", Storage="_Presentacion", ThisKey="presentacionId", OtherKey="presentacionId", IsForeignKey=true)]
		public Presentacion Presentacion
		{
			get
			{
				return this._Presentacion.Entity;
			}
			set
			{
				Presentacion previousValue = this._Presentacion.Entity;
				if (((previousValue != value) 
							|| (this._Presentacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Presentacion.Entity = null;
						previousValue.Producto.Remove(this);
					}
					this._Presentacion.Entity = value;
					if ((value != null))
					{
						value.Producto.Add(this);
						this._presentacionId = value.presentacionId;
					}
					else
					{
						this._presentacionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Presentacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rol")]
	public partial class Rol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rolId;
		
		private string _rol_descripcion;
		
		private EntitySet<UsuarioRol> _UsuarioRol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrolIdChanging(int value);
    partial void OnrolIdChanged();
    partial void Onrol_descripcionChanging(string value);
    partial void Onrol_descripcionChanged();
    #endregion
		
		public Rol()
		{
			this._UsuarioRol = new EntitySet<UsuarioRol>(new Action<UsuarioRol>(this.attach_UsuarioRol), new Action<UsuarioRol>(this.detach_UsuarioRol));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rolId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rolId
		{
			get
			{
				return this._rolId;
			}
			set
			{
				if ((this._rolId != value))
				{
					this.OnrolIdChanging(value);
					this.SendPropertyChanging();
					this._rolId = value;
					this.SendPropertyChanged("rolId");
					this.OnrolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rol_descripcion", DbType="VarChar(500)")]
		public string rol_descripcion
		{
			get
			{
				return this._rol_descripcion;
			}
			set
			{
				if ((this._rol_descripcion != value))
				{
					this.Onrol_descripcionChanging(value);
					this.SendPropertyChanging();
					this._rol_descripcion = value;
					this.SendPropertyChanged("rol_descripcion");
					this.Onrol_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rol_UsuarioRol", Storage="_UsuarioRol", ThisKey="rolId", OtherKey="rolId")]
		public EntitySet<UsuarioRol> UsuarioRol
		{
			get
			{
				return this._UsuarioRol;
			}
			set
			{
				this._UsuarioRol.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsuarioRol(UsuarioRol entity)
		{
			this.SendPropertyChanging();
			entity.Rol = this;
		}
		
		private void detach_UsuarioRol(UsuarioRol entity)
		{
			this.SendPropertyChanging();
			entity.Rol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ruta")]
	public partial class Ruta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rutaId;
		
		private string _ruta_descripcion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrutaIdChanging(int value);
    partial void OnrutaIdChanged();
    partial void Onruta_descripcionChanging(string value);
    partial void Onruta_descripcionChanged();
    #endregion
		
		public Ruta()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rutaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rutaId
		{
			get
			{
				return this._rutaId;
			}
			set
			{
				if ((this._rutaId != value))
				{
					this.OnrutaIdChanging(value);
					this.SendPropertyChanging();
					this._rutaId = value;
					this.SendPropertyChanged("rutaId");
					this.OnrutaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ruta_descripcion", DbType="VarChar(500)")]
		public string ruta_descripcion
		{
			get
			{
				return this._ruta_descripcion;
			}
			set
			{
				if ((this._ruta_descripcion != value))
				{
					this.Onruta_descripcionChanging(value);
					this.SendPropertyChanging();
					this._ruta_descripcion = value;
					this.SendPropertyChanged("ruta_descripcion");
					this.Onruta_descripcionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sucursal")]
	public partial class Sucursal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sucursalId;
		
		private string _sucursal_descripcion;
		
		private System.Nullable<int> _estadoId;
		
		private EntitySet<UsuarioSucursal> _UsuarioSucursal;
		
		private EntitySet<Colonia> _Colonia;
		
		private EntityRef<Estado> _Estado;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsucursalIdChanging(int value);
    partial void OnsucursalIdChanged();
    partial void Onsucursal_descripcionChanging(string value);
    partial void Onsucursal_descripcionChanged();
    partial void OnestadoIdChanging(System.Nullable<int> value);
    partial void OnestadoIdChanged();
    #endregion
		
		public Sucursal()
		{
			this._UsuarioSucursal = new EntitySet<UsuarioSucursal>(new Action<UsuarioSucursal>(this.attach_UsuarioSucursal), new Action<UsuarioSucursal>(this.detach_UsuarioSucursal));
			this._Colonia = new EntitySet<Colonia>(new Action<Colonia>(this.attach_Colonia), new Action<Colonia>(this.detach_Colonia));
			this._Estado = default(EntityRef<Estado>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sucursalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sucursalId
		{
			get
			{
				return this._sucursalId;
			}
			set
			{
				if ((this._sucursalId != value))
				{
					this.OnsucursalIdChanging(value);
					this.SendPropertyChanging();
					this._sucursalId = value;
					this.SendPropertyChanged("sucursalId");
					this.OnsucursalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sucursal_descripcion", DbType="VarChar(50)")]
		public string sucursal_descripcion
		{
			get
			{
				return this._sucursal_descripcion;
			}
			set
			{
				if ((this._sucursal_descripcion != value))
				{
					this.Onsucursal_descripcionChanging(value);
					this.SendPropertyChanging();
					this._sucursal_descripcion = value;
					this.SendPropertyChanged("sucursal_descripcion");
					this.Onsucursal_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_estadoId", DbType="Int")]
		public System.Nullable<int> estadoId
		{
			get
			{
				return this._estadoId;
			}
			set
			{
				if ((this._estadoId != value))
				{
					if (this._Estado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnestadoIdChanging(value);
					this.SendPropertyChanging();
					this._estadoId = value;
					this.SendPropertyChanged("estadoId");
					this.OnestadoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_UsuarioSucursal", Storage="_UsuarioSucursal", ThisKey="sucursalId", OtherKey="sucursalId")]
		public EntitySet<UsuarioSucursal> UsuarioSucursal
		{
			get
			{
				return this._UsuarioSucursal;
			}
			set
			{
				this._UsuarioSucursal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_Colonia", Storage="_Colonia", ThisKey="sucursalId", OtherKey="sucursalId")]
		public EntitySet<Colonia> Colonia
		{
			get
			{
				return this._Colonia;
			}
			set
			{
				this._Colonia.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estado_Sucursal", Storage="_Estado", ThisKey="estadoId", OtherKey="estadoId", IsForeignKey=true)]
		public Estado Estado
		{
			get
			{
				return this._Estado.Entity;
			}
			set
			{
				Estado previousValue = this._Estado.Entity;
				if (((previousValue != value) 
							|| (this._Estado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estado.Entity = null;
						previousValue.Sucursal.Remove(this);
					}
					this._Estado.Entity = value;
					if ((value != null))
					{
						value.Sucursal.Add(this);
						this._estadoId = value.estadoId;
					}
					else
					{
						this._estadoId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Estado");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsuarioSucursal(UsuarioSucursal entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = this;
		}
		
		private void detach_UsuarioSucursal(UsuarioSucursal entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = null;
		}
		
		private void attach_Colonia(Colonia entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = this;
		}
		
		private void detach_Colonia(Colonia entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuario")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _usuarioId;
		
		private string _usuario1;
		
		private string _usuario_nombre;
		
		private string _usuario_apellido;
		
		private string _usuario_email;
		
		private EntitySet<UsuarioSucursal> _UsuarioSucursal;
		
		private EntitySet<UsuarioRol> _UsuarioRol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusuarioIdChanging(int value);
    partial void OnusuarioIdChanged();
    partial void Onusuario1Changing(string value);
    partial void Onusuario1Changed();
    partial void Onusuario_nombreChanging(string value);
    partial void Onusuario_nombreChanged();
    partial void Onusuario_apellidoChanging(string value);
    partial void Onusuario_apellidoChanged();
    partial void Onusuario_emailChanging(string value);
    partial void Onusuario_emailChanged();
    #endregion
		
		public Usuario()
		{
			this._UsuarioSucursal = new EntitySet<UsuarioSucursal>(new Action<UsuarioSucursal>(this.attach_UsuarioSucursal), new Action<UsuarioSucursal>(this.detach_UsuarioSucursal));
			this._UsuarioRol = new EntitySet<UsuarioRol>(new Action<UsuarioRol>(this.attach_UsuarioRol), new Action<UsuarioRol>(this.detach_UsuarioRol));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuarioId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int usuarioId
		{
			get
			{
				return this._usuarioId;
			}
			set
			{
				if ((this._usuarioId != value))
				{
					this.OnusuarioIdChanging(value);
					this.SendPropertyChanging();
					this._usuarioId = value;
					this.SendPropertyChanged("usuarioId");
					this.OnusuarioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="usuario", Storage="_usuario1", DbType="VarChar(50)")]
		public string usuario1
		{
			get
			{
				return this._usuario1;
			}
			set
			{
				if ((this._usuario1 != value))
				{
					this.Onusuario1Changing(value);
					this.SendPropertyChanging();
					this._usuario1 = value;
					this.SendPropertyChanged("usuario1");
					this.Onusuario1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuario_nombre", DbType="VarChar(50)")]
		public string usuario_nombre
		{
			get
			{
				return this._usuario_nombre;
			}
			set
			{
				if ((this._usuario_nombre != value))
				{
					this.Onusuario_nombreChanging(value);
					this.SendPropertyChanging();
					this._usuario_nombre = value;
					this.SendPropertyChanged("usuario_nombre");
					this.Onusuario_nombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuario_apellido", DbType="VarChar(50)")]
		public string usuario_apellido
		{
			get
			{
				return this._usuario_apellido;
			}
			set
			{
				if ((this._usuario_apellido != value))
				{
					this.Onusuario_apellidoChanging(value);
					this.SendPropertyChanging();
					this._usuario_apellido = value;
					this.SendPropertyChanged("usuario_apellido");
					this.Onusuario_apellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuario_email", DbType="VarChar(50)")]
		public string usuario_email
		{
			get
			{
				return this._usuario_email;
			}
			set
			{
				if ((this._usuario_email != value))
				{
					this.Onusuario_emailChanging(value);
					this.SendPropertyChanging();
					this._usuario_email = value;
					this.SendPropertyChanged("usuario_email");
					this.Onusuario_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_UsuarioSucursal", Storage="_UsuarioSucursal", ThisKey="usuarioId", OtherKey="usuarioId")]
		public EntitySet<UsuarioSucursal> UsuarioSucursal
		{
			get
			{
				return this._UsuarioSucursal;
			}
			set
			{
				this._UsuarioSucursal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_UsuarioRol", Storage="_UsuarioRol", ThisKey="usuarioId", OtherKey="usuarioId")]
		public EntitySet<UsuarioRol> UsuarioRol
		{
			get
			{
				return this._UsuarioRol;
			}
			set
			{
				this._UsuarioRol.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsuarioSucursal(UsuarioSucursal entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_UsuarioSucursal(UsuarioSucursal entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_UsuarioRol(UsuarioRol entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_UsuarioRol(UsuarioRol entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsuarioRol")]
	public partial class UsuarioRol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _usuariorolId;
		
		private int _usuarioId;
		
		private int _rolId;
		
		private EntityRef<Rol> _Rol;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusuariorolIdChanging(int value);
    partial void OnusuariorolIdChanged();
    partial void OnusuarioIdChanging(int value);
    partial void OnusuarioIdChanged();
    partial void OnrolIdChanging(int value);
    partial void OnrolIdChanged();
    #endregion
		
		public UsuarioRol()
		{
			this._Rol = default(EntityRef<Rol>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuariorolId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int usuariorolId
		{
			get
			{
				return this._usuariorolId;
			}
			set
			{
				if ((this._usuariorolId != value))
				{
					this.OnusuariorolIdChanging(value);
					this.SendPropertyChanging();
					this._usuariorolId = value;
					this.SendPropertyChanged("usuariorolId");
					this.OnusuariorolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuarioId", DbType="Int NOT NULL")]
		public int usuarioId
		{
			get
			{
				return this._usuarioId;
			}
			set
			{
				if ((this._usuarioId != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusuarioIdChanging(value);
					this.SendPropertyChanging();
					this._usuarioId = value;
					this.SendPropertyChanged("usuarioId");
					this.OnusuarioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rolId", DbType="Int NOT NULL")]
		public int rolId
		{
			get
			{
				return this._rolId;
			}
			set
			{
				if ((this._rolId != value))
				{
					if (this._Rol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrolIdChanging(value);
					this.SendPropertyChanging();
					this._rolId = value;
					this.SendPropertyChanged("rolId");
					this.OnrolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rol_UsuarioRol", Storage="_Rol", ThisKey="rolId", OtherKey="rolId", IsForeignKey=true)]
		public Rol Rol
		{
			get
			{
				return this._Rol.Entity;
			}
			set
			{
				Rol previousValue = this._Rol.Entity;
				if (((previousValue != value) 
							|| (this._Rol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rol.Entity = null;
						previousValue.UsuarioRol.Remove(this);
					}
					this._Rol.Entity = value;
					if ((value != null))
					{
						value.UsuarioRol.Add(this);
						this._rolId = value.rolId;
					}
					else
					{
						this._rolId = default(int);
					}
					this.SendPropertyChanged("Rol");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_UsuarioRol", Storage="_Usuario", ThisKey="usuarioId", OtherKey="usuarioId", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.UsuarioRol.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.UsuarioRol.Add(this);
						this._usuarioId = value.usuarioId;
					}
					else
					{
						this._usuarioId = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
